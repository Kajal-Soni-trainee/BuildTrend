{"ast":null,"code":"import { reactive, computed, ref } from \"vue\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport { required, helpers, email } from \"@vuelidate/validators\";\nimport { useRouter } from \"vue-router\";\nimport { axiosPost } from \"../services/service\";\nimport { isNumber, isCapAlpha, isSpecialChar } from \"../../public/scripts/validation\";\nexport default {\n  __name: 'Login',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const loginData = reactive({\n      email: null,\n      password: null\n    });\n    const showPass = ref(false);\n    const router = useRouter();\n    const rules = computed(() => {\n      return {\n        email: {\n          required,\n          email\n        },\n        password: {\n          required,\n          isNumber: helpers.withMessage(\"Password must include some deigits\", isNumber),\n          isCapAlpha: helpers.withMessage(\"Password must contain some capital letters\", isCapAlpha),\n          isSpecialChar: helpers.withMessage(\"Password must include some special character\", isSpecialChar)\n        }\n      };\n    });\n    const v$ = useVuelidate(rules, loginData);\n    async function login() {\n      const result = await v$.value.$validate();\n      if (result) {\n        const res = await axiosPost;\n      }\n    }\n    async function forgetPassword() {}\n    const __returned__ = {\n      loginData,\n      showPass,\n      router,\n      rules,\n      v$,\n      login,\n      forgetPassword,\n      reactive,\n      computed,\n      ref,\n      get useVuelidate() {\n        return useVuelidate;\n      },\n      get required() {\n        return required;\n      },\n      get helpers() {\n        return helpers;\n      },\n      get email() {\n        return email;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get axiosPost() {\n        return axiosPost;\n      },\n      get isNumber() {\n        return isNumber;\n      },\n      get isCapAlpha() {\n        return isCapAlpha;\n      },\n      get isSpecialChar() {\n        return isSpecialChar;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["reactive","computed","ref","useVuelidate","required","helpers","email","useRouter","axiosPost","isNumber","isCapAlpha","isSpecialChar","loginData","password","showPass","router","rules","withMessage","v$","login","result","value","$validate","res","forgetPassword"],"sources":["/home/kajal-soni/Documents/VueJs/buildtrend/frontend/src/components/Login.vue"],"sourcesContent":["<template>\n  <v-card style=\"width: 600px\" :elevation=\"12\" class=\"pa-5 rounded-xl\">\n    <v-card-title class=\"text-teal-darken-4 text-h4 text-center py-5\"\n      >Login From</v-card-title\n    >\n    <v-form>\n      <v-text-field\n        variant=\"solo-filled\"\n        label=\"email\"\n        :error-messages=\"v$.password.$errors.map((e) => e.$message)\"\n        @blur=\"v$.password.$touch\"\n      ></v-text-field>\n      <v-text-field\n        variant=\"solo-filled\"\n        :type=\"showPass ? 'text' : 'password'\"\n        label=\"Password\"\n        v-model=\"userData.password\"\n        :append-inner-icon=\"showPass ? 'mdi-eye-off' : 'mdi-eye'\"\n        :error-messages=\"v$.password.$errors.map((e) => e.$message)\"\n        @blur=\"v$.password.$touch\"\n        @click:append-inner=\"showPass = !showPass\"\n      ></v-text-field>\n      <div class=\"d-flex flex-row justify-center align-center\">\n        <v-btn class=\"bg-teal-darken-4 text-h5\" @click=\"login\">Login</v-btn>\n      </div>\n    </v-form>\n    <div class=\"d-flex justify-center align-center pa-5\">\n      <p>Forget Password?</p>\n      <p class=\"text-teal-darken-4\" @click=\"forgetPassword\">reset password</p>\n    </div>\n  </v-card>\n</template>\n<script setup>\nimport { reactive, computed, ref } from \"vue\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport { required, helpers, email } from \"@vuelidate/validators\";\nimport { useRouter } from \"vue-router\";\nimport { axiosPost } from \"../services/service\";\nimport {\n  isNumber,\n  isCapAlpha,\n  isSpecialChar,\n} from \"../../public/scripts/validation\";\nconst loginData = reactive({\n  email: null,\n  password: null,\n});\nconst showPass = ref(false);\nconst router = useRouter();\nconst rules = computed(() => {\n  return {\n    email: { required, email },\n    password: {\n      required,\n      isNumber: helpers.withMessage(\n        \"Password must include some deigits\",\n        isNumber\n      ),\n      isCapAlpha: helpers.withMessage(\n        \"Password must contain some capital letters\",\n        isCapAlpha\n      ),\n      isSpecialChar: helpers.withMessage(\n        \"Password must include some special character\",\n        isSpecialChar\n      ),\n    },\n  };\n});\nconst v$ = useVuelidate(rules, loginData);\nasync function login() {\n  const result = await v$.value.$validate();\n  if(result){\n    const res = await axiosPost\n  }\n}\nasync function forgetPassword() {}\n</script>\n<style scoped></style>\n"],"mappings":"AAiCA,SAASA,QAAQ,EAAEC,QAAQ,EAAEC,GAAG,QAAQ,KAAK;AAC7C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,QAAQ,EAAEC,OAAO,EAAEC,KAAK,QAAQ,uBAAuB;AAChE,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SACEC,QAAQ,EACRC,UAAU,EACVC,aAAa,QACR,iCAAiC;;;;;;;IACxC,MAAMC,SAAS,GAAGZ,QAAQ,CAAC;MACzBM,KAAK,EAAE,IAAI;MACXO,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF,MAAMC,QAAQ,GAAGZ,GAAG,CAAC,KAAK,CAAC;IAC3B,MAAMa,MAAM,GAAGR,SAAS,CAAC,CAAC;IAC1B,MAAMS,KAAK,GAAGf,QAAQ,CAAC,MAAM;MAC3B,OAAO;QACLK,KAAK,EAAE;UAAEF,QAAQ;UAAEE;QAAM,CAAC;QAC1BO,QAAQ,EAAE;UACRT,QAAQ;UACRK,QAAQ,EAAEJ,OAAO,CAACY,WAAW,CAC3B,oCAAoC,EACpCR,QACF,CAAC;UACDC,UAAU,EAAEL,OAAO,CAACY,WAAW,CAC7B,4CAA4C,EAC5CP,UACF,CAAC;UACDC,aAAa,EAAEN,OAAO,CAACY,WAAW,CAChC,8CAA8C,EAC9CN,aACF;QACF;MACF,CAAC;IACH,CAAC,CAAC;IACF,MAAMO,EAAE,GAAGf,YAAY,CAACa,KAAK,EAAEJ,SAAS,CAAC;IACzC,eAAeO,KAAKA,CAAA,EAAG;MACrB,MAAMC,MAAM,GAAG,MAAMF,EAAE,CAACG,KAAK,CAACC,SAAS,CAAC,CAAC;MACzC,IAAGF,MAAM,EAAC;QACR,MAAMG,GAAG,GAAG,MAAMf,SAAS;MAC7B;IACF;IACA,eAAegB,cAAcA,CAAA,EAAG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}